/* tslint:disable */
/* eslint-disable */
/**
 * Training Plans Api - All Versions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePlannedTrainingCommand,
  PlannedTrainingsDto,
  ProblemDetails,
  UpdatePlannedTrainingCommand,
} from '../models';
import {
    CreatePlannedTrainingCommandFromJSON,
    CreatePlannedTrainingCommandToJSON,
    PlannedTrainingsDtoFromJSON,
    PlannedTrainingsDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdatePlannedTrainingCommandFromJSON,
    UpdatePlannedTrainingCommandToJSON,
} from '../models';

export interface CreatePlannedTrainingRequest {
    createPlannedTrainingCommand?: CreatePlannedTrainingCommand;
}

export interface DeletePlannedTrainingRequest {
    identifier: string;
}

export interface GetAllUserPlannedTrainingsRequest {
    userId: number;
}

export interface GetPlannedTrainingRequest {
    identifier: string;
}

export interface UpdatePlannedTrainingRequest {
    updatePlannedTrainingCommand?: UpdatePlannedTrainingCommand;
}

/**
 * PlannedTrainingApi - interface
 * 
 * @export
 * @interface PlannedTrainingApiInterface
 */
export interface PlannedTrainingApiInterface {
    /**
     * 
     * @summary Create planned training
     * @param {CreatePlannedTrainingCommand} [createPlannedTrainingCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlannedTrainingApiInterface
     */
    createPlannedTrainingRaw(requestParameters: CreatePlannedTrainingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlannedTrainingsDto>>;

    /**
     * Create planned training
     */
    createPlannedTraining(createPlannedTrainingCommand?: CreatePlannedTrainingCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlannedTrainingsDto>;

    /**
     * 
     * @summary Delete planned trainings
     * @param {string} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlannedTrainingApiInterface
     */
    deletePlannedTrainingRaw(requestParameters: DeletePlannedTrainingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlannedTrainingsDto>>;

    /**
     * Delete planned trainings
     */
    deletePlannedTraining(identifier: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlannedTrainingsDto>;

    /**
     * 
     * @summary Gets all user planned training
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlannedTrainingApiInterface
     */
    getAllUserPlannedTrainingsRaw(requestParameters: GetAllUserPlannedTrainingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlannedTrainingsDto>>>;

    /**
     * Gets all user planned training
     */
    getAllUserPlannedTrainings(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlannedTrainingsDto>>;

    /**
     * 
     * @summary Gets planned training
     * @param {string} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlannedTrainingApiInterface
     */
    getPlannedTrainingRaw(requestParameters: GetPlannedTrainingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlannedTrainingsDto>>;

    /**
     * Gets planned training
     */
    getPlannedTraining(identifier: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlannedTrainingsDto>;

    /**
     * 
     * @summary Update planned training
     * @param {UpdatePlannedTrainingCommand} [updatePlannedTrainingCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlannedTrainingApiInterface
     */
    updatePlannedTrainingRaw(requestParameters: UpdatePlannedTrainingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlannedTrainingsDto>>;

    /**
     * Update planned training
     */
    updatePlannedTraining(updatePlannedTrainingCommand?: UpdatePlannedTrainingCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlannedTrainingsDto>;

}

/**
 * 
 */
export class PlannedTrainingApi extends runtime.BaseAPI implements PlannedTrainingApiInterface {

    /**
     * Create planned training
     */
    async createPlannedTrainingRaw(requestParameters: CreatePlannedTrainingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlannedTrainingsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/planned-training`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlannedTrainingCommandToJSON(requestParameters.createPlannedTrainingCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlannedTrainingsDtoFromJSON(jsonValue));
    }

    /**
     * Create planned training
     */
    async createPlannedTraining(createPlannedTrainingCommand?: CreatePlannedTrainingCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlannedTrainingsDto> {
        const response = await this.createPlannedTrainingRaw({ createPlannedTrainingCommand: createPlannedTrainingCommand }, initOverrides);
        return await response.value();
    }

    /**
     * Delete planned trainings
     */
    async deletePlannedTrainingRaw(requestParameters: DeletePlannedTrainingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlannedTrainingsDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling deletePlannedTraining.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/planned-training/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlannedTrainingsDtoFromJSON(jsonValue));
    }

    /**
     * Delete planned trainings
     */
    async deletePlannedTraining(identifier: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlannedTrainingsDto> {
        const response = await this.deletePlannedTrainingRaw({ identifier: identifier }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all user planned training
     */
    async getAllUserPlannedTrainingsRaw(requestParameters: GetAllUserPlannedTrainingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlannedTrainingsDto>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getAllUserPlannedTrainings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/planned-trainings/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlannedTrainingsDtoFromJSON));
    }

    /**
     * Gets all user planned training
     */
    async getAllUserPlannedTrainings(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlannedTrainingsDto>> {
        const response = await this.getAllUserPlannedTrainingsRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets planned training
     */
    async getPlannedTrainingRaw(requestParameters: GetPlannedTrainingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlannedTrainingsDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling getPlannedTraining.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/planned-training/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlannedTrainingsDtoFromJSON(jsonValue));
    }

    /**
     * Gets planned training
     */
    async getPlannedTraining(identifier: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlannedTrainingsDto> {
        const response = await this.getPlannedTrainingRaw({ identifier: identifier }, initOverrides);
        return await response.value();
    }

    /**
     * Update planned training
     */
    async updatePlannedTrainingRaw(requestParameters: UpdatePlannedTrainingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlannedTrainingsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/planned-training`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlannedTrainingCommandToJSON(requestParameters.updatePlannedTrainingCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlannedTrainingsDtoFromJSON(jsonValue));
    }

    /**
     * Update planned training
     */
    async updatePlannedTraining(updatePlannedTrainingCommand?: UpdatePlannedTrainingCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlannedTrainingsDto> {
        const response = await this.updatePlannedTrainingRaw({ updatePlannedTrainingCommand: updatePlannedTrainingCommand }, initOverrides);
        return await response.value();
    }

}
