/* tslint:disable */
/* eslint-disable */
/**
 * Training Plans Api - All Versions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExercisesInfoDetailsDto,
  ProblemDetails,
} from '../models';
import {
    ExercisesInfoDetailsDtoFromJSON,
    ExercisesInfoDetailsDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface DeleteExercisesInfoAttachmentRequest {
    key: string;
    identifier: number;
}

export interface GetExercisesInfoAttachmentRequest {
    identifier: number;
}

export interface UpdateExercisesInfoAttachmentRequest {
    identifier: number;
    photoFile?: Blob;
}

/**
 * AttachmentApi - interface
 * 
 * @export
 * @interface AttachmentApiInterface
 */
export interface AttachmentApiInterface {
    /**
     * 
     * @summary Deleted exercises-info attachment
     * @param {string} key 
     * @param {number} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentApiInterface
     */
    deleteExercisesInfoAttachmentRaw(requestParameters: DeleteExercisesInfoAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDetailsDto>>;

    /**
     * Deleted exercises-info attachment
     */
    deleteExercisesInfoAttachment(key: string, identifier: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDetailsDto>;

    /**
     * 
     * @summary Get exercises-info attachment
     * @param {number} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentApiInterface
     */
    getExercisesInfoAttachmentRaw(requestParameters: GetExercisesInfoAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDetailsDto>>;

    /**
     * Get exercises-info attachment
     */
    getExercisesInfoAttachment(identifier: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDetailsDto>;

    /**
     * 
     * @summary Updated exercises-info attachment
     * @param {number} identifier 
     * @param {Blob} [photoFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentApiInterface
     */
    updateExercisesInfoAttachmentRaw(requestParameters: UpdateExercisesInfoAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDetailsDto>>;

    /**
     * Updated exercises-info attachment
     */
    updateExercisesInfoAttachment(identifier: number, photoFile?: Blob, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDetailsDto>;

}

/**
 * 
 */
export class AttachmentApi extends runtime.BaseAPI implements AttachmentApiInterface {

    /**
     * Deleted exercises-info attachment
     */
    async deleteExercisesInfoAttachmentRaw(requestParameters: DeleteExercisesInfoAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDetailsDto>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteExercisesInfoAttachment.');
        }

        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling deleteExercisesInfoAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/attachment/{key}/exercises-info/{identifier}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))).replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExercisesInfoDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Deleted exercises-info attachment
     */
    async deleteExercisesInfoAttachment(key: string, identifier: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDetailsDto> {
        const response = await this.deleteExercisesInfoAttachmentRaw({ key: key, identifier: identifier }, initOverrides);
        return await response.value();
    }

    /**
     * Get exercises-info attachment
     */
    async getExercisesInfoAttachmentRaw(requestParameters: GetExercisesInfoAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDetailsDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling getExercisesInfoAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-info/{identifier}/attachment`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExercisesInfoDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Get exercises-info attachment
     */
    async getExercisesInfoAttachment(identifier: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDetailsDto> {
        const response = await this.getExercisesInfoAttachmentRaw({ identifier: identifier }, initOverrides);
        return await response.value();
    }

    /**
     * Updated exercises-info attachment
     */
    async updateExercisesInfoAttachmentRaw(requestParameters: UpdateExercisesInfoAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDetailsDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling updateExercisesInfoAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.photoFile !== undefined) {
            formParams.append('photoFile', requestParameters.photoFile as any);
        }

        const response = await this.request({
            path: `/api/v1/attachment/exercises-info/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExercisesInfoDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Updated exercises-info attachment
     */
    async updateExercisesInfoAttachment(identifier: number, photoFile?: Blob, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDetailsDto> {
        const response = await this.updateExercisesInfoAttachmentRaw({ identifier: identifier, photoFile: photoFile }, initOverrides);
        return await response.value();
    }

}
