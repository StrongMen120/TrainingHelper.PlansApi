/* tslint:disable */
/* eslint-disable */
/**
 * Training Plans Api - All Versions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateExerciseInfoCommand,
  ExercisesInfoDto,
  ProblemDetails,
  UpdateExerciseInfoCommand,
} from '../models';
import {
    CreateExerciseInfoCommandFromJSON,
    CreateExerciseInfoCommandToJSON,
    ExercisesInfoDtoFromJSON,
    ExercisesInfoDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateExerciseInfoCommandFromJSON,
    UpdateExerciseInfoCommandToJSON,
} from '../models';

export interface CreateExerciseInfoRequest {
    createExerciseInfoCommand?: CreateExerciseInfoCommand;
}

export interface DeleteExerciseInfoRequest {
    identifier: number;
}

export interface GetExerciseInfoRequest {
    identifier: number;
}

export interface UpdateExerciseInfoRequest {
    updateExerciseInfoCommand?: UpdateExerciseInfoCommand;
}

/**
 * ExercisesInfoApi - interface
 * 
 * @export
 * @interface ExercisesInfoApiInterface
 */
export interface ExercisesInfoApiInterface {
    /**
     * 
     * @summary Create exercise info
     * @param {CreateExerciseInfoCommand} [createExerciseInfoCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesInfoApiInterface
     */
    createExerciseInfoRaw(requestParameters: CreateExerciseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDto>>;

    /**
     * Create exercise info
     */
    createExerciseInfo(createExerciseInfoCommand?: CreateExerciseInfoCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDto>;

    /**
     * 
     * @summary Delete exercise info
     * @param {number} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesInfoApiInterface
     */
    deleteExerciseInfoRaw(requestParameters: DeleteExerciseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDto>>;

    /**
     * Delete exercise info
     */
    deleteExerciseInfo(identifier: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDto>;

    /**
     * 
     * @summary Gets all exercises info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesInfoApiInterface
     */
    getAllExercisesInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExercisesInfoDto>>>;

    /**
     * Gets all exercises info
     */
    getAllExercisesInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExercisesInfoDto>>;

    /**
     * 
     * @summary Gets exercises info
     * @param {number} identifier 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesInfoApiInterface
     */
    getExerciseInfoRaw(requestParameters: GetExerciseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDto>>;

    /**
     * Gets exercises info
     */
    getExerciseInfo(identifier: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDto>;

    /**
     * 
     * @summary Update exercise info
     * @param {UpdateExerciseInfoCommand} [updateExerciseInfoCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesInfoApiInterface
     */
    updateExerciseInfoRaw(requestParameters: UpdateExerciseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDto>>;

    /**
     * Update exercise info
     */
    updateExerciseInfo(updateExerciseInfoCommand?: UpdateExerciseInfoCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDto>;

}

/**
 * 
 */
export class ExercisesInfoApi extends runtime.BaseAPI implements ExercisesInfoApiInterface {

    /**
     * Create exercise info
     */
    async createExerciseInfoRaw(requestParameters: CreateExerciseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-info`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExerciseInfoCommandToJSON(requestParameters.createExerciseInfoCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExercisesInfoDtoFromJSON(jsonValue));
    }

    /**
     * Create exercise info
     */
    async createExerciseInfo(createExerciseInfoCommand?: CreateExerciseInfoCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDto> {
        const response = await this.createExerciseInfoRaw({ createExerciseInfoCommand: createExerciseInfoCommand }, initOverrides);
        return await response.value();
    }

    /**
     * Delete exercise info
     */
    async deleteExerciseInfoRaw(requestParameters: DeleteExerciseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling deleteExerciseInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-info/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExercisesInfoDtoFromJSON(jsonValue));
    }

    /**
     * Delete exercise info
     */
    async deleteExerciseInfo(identifier: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDto> {
        const response = await this.deleteExerciseInfoRaw({ identifier: identifier }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all exercises info
     */
    async getAllExercisesInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExercisesInfoDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExercisesInfoDtoFromJSON));
    }

    /**
     * Gets all exercises info
     */
    async getAllExercisesInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExercisesInfoDto>> {
        const response = await this.getAllExercisesInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Gets exercises info
     */
    async getExerciseInfoRaw(requestParameters: GetExerciseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling getExerciseInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-info/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExercisesInfoDtoFromJSON(jsonValue));
    }

    /**
     * Gets exercises info
     */
    async getExerciseInfo(identifier: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDto> {
        const response = await this.getExerciseInfoRaw({ identifier: identifier }, initOverrides);
        return await response.value();
    }

    /**
     * Update exercise info
     */
    async updateExerciseInfoRaw(requestParameters: UpdateExerciseInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesInfoDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-info`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExerciseInfoCommandToJSON(requestParameters.updateExerciseInfoCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExercisesInfoDtoFromJSON(jsonValue));
    }

    /**
     * Update exercise info
     */
    async updateExerciseInfo(updateExerciseInfoCommand?: UpdateExerciseInfoCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesInfoDto> {
        const response = await this.updateExerciseInfoRaw({ updateExerciseInfoCommand: updateExerciseInfoCommand }, initOverrides);
        return await response.value();
    }

}
