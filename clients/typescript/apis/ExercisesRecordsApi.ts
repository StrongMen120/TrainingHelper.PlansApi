/* tslint:disable */
/* eslint-disable */
/**
 * Training Plans Api - All Versions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateExercisesRecordsCommand,
  ExercisesRecordsDto,
  ProblemDetails,
} from '../models';
import {
    CreateExercisesRecordsCommandFromJSON,
    CreateExercisesRecordsCommandToJSON,
    ExercisesRecordsDtoFromJSON,
    ExercisesRecordsDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface CreateExercisesRecordsRequest {
    createExercisesRecordsCommand?: CreateExercisesRecordsCommand;
}

export interface GetExercisesAllRecordsRequest {
    userId: number;
}

export interface GetExercisesRecordsHistoryRequest {
    exerciseId: number;
    userId: number;
}

/**
 * ExercisesRecordsApi - interface
 * 
 * @export
 * @interface ExercisesRecordsApiInterface
 */
export interface ExercisesRecordsApiInterface {
    /**
     * 
     * @summary Create exercise records
     * @param {CreateExercisesRecordsCommand} [createExercisesRecordsCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesRecordsApiInterface
     */
    createExercisesRecordsRaw(requestParameters: CreateExercisesRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesRecordsDto>>;

    /**
     * Create exercise records
     */
    createExercisesRecords(createExercisesRecordsCommand?: CreateExercisesRecordsCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesRecordsDto>;

    /**
     * 
     * @summary Gets exercises all records to user
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesRecordsApiInterface
     */
    getExercisesAllRecordsRaw(requestParameters: GetExercisesAllRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExercisesRecordsDto>>>;

    /**
     * Gets exercises all records to user
     */
    getExercisesAllRecords(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExercisesRecordsDto>>;

    /**
     * 
     * @summary Gets exercises records history
     * @param {number} exerciseId 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesRecordsApiInterface
     */
    getExercisesRecordsHistoryRaw(requestParameters: GetExercisesRecordsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExercisesRecordsDto>>>;

    /**
     * Gets exercises records history
     */
    getExercisesRecordsHistory(exerciseId: number, userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExercisesRecordsDto>>;

}

/**
 * 
 */
export class ExercisesRecordsApi extends runtime.BaseAPI implements ExercisesRecordsApiInterface {

    /**
     * Create exercise records
     */
    async createExercisesRecordsRaw(requestParameters: CreateExercisesRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExercisesRecordsDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-records`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateExercisesRecordsCommandToJSON(requestParameters.createExercisesRecordsCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExercisesRecordsDtoFromJSON(jsonValue));
    }

    /**
     * Create exercise records
     */
    async createExercisesRecords(createExercisesRecordsCommand?: CreateExercisesRecordsCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExercisesRecordsDto> {
        const response = await this.createExercisesRecordsRaw({ createExercisesRecordsCommand: createExercisesRecordsCommand }, initOverrides);
        return await response.value();
    }

    /**
     * Gets exercises all records to user
     */
    async getExercisesAllRecordsRaw(requestParameters: GetExercisesAllRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExercisesRecordsDto>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getExercisesAllRecords.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-records/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExercisesRecordsDtoFromJSON));
    }

    /**
     * Gets exercises all records to user
     */
    async getExercisesAllRecords(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExercisesRecordsDto>> {
        const response = await this.getExercisesAllRecordsRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets exercises records history
     */
    async getExercisesRecordsHistoryRaw(requestParameters: GetExercisesRecordsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExercisesRecordsDto>>> {
        if (requestParameters.exerciseId === null || requestParameters.exerciseId === undefined) {
            throw new runtime.RequiredError('exerciseId','Required parameter requestParameters.exerciseId was null or undefined when calling getExercisesRecordsHistory.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getExercisesRecordsHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/exercises-records/{exerciseId}/user/{userId}`.replace(`{${"exerciseId"}}`, encodeURIComponent(String(requestParameters.exerciseId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExercisesRecordsDtoFromJSON));
    }

    /**
     * Gets exercises records history
     */
    async getExercisesRecordsHistory(exerciseId: number, userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExercisesRecordsDto>> {
        const response = await this.getExercisesRecordsHistoryRaw({ exerciseId: exerciseId, userId: userId }, initOverrides);
        return await response.value();
    }

}
