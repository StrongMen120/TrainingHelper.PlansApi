/* tslint:disable */
/* eslint-disable */
/**
 * Training Plans Api - All Versions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDoneExerciseCommand,
  DoneExercisesDto,
  ProblemDetails,
  UpdateDoneExerciseCommand,
} from '../models';
import {
    CreateDoneExerciseCommandFromJSON,
    CreateDoneExerciseCommandToJSON,
    DoneExercisesDtoFromJSON,
    DoneExercisesDtoToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateDoneExerciseCommandFromJSON,
    UpdateDoneExerciseCommandToJSON,
} from '../models';

export interface CreateDoneExerciseRequest {
    createDoneExerciseCommand?: CreateDoneExerciseCommand;
}

export interface DeleteDoneExerciseRequest {
    doneExerciseId: string;
}

export interface GetAllDoneExerciseRequest {
    userId: number;
}

export interface UpdateDoneExerciseRequest {
    identifier: string;
    updateDoneExerciseCommand?: UpdateDoneExerciseCommand;
}

/**
 * DoneExerciseApi - interface
 * 
 * @export
 * @interface DoneExerciseApiInterface
 */
export interface DoneExerciseApiInterface {
    /**
     * 
     * @summary Create done exercises
     * @param {CreateDoneExerciseCommand} [createDoneExerciseCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoneExerciseApiInterface
     */
    createDoneExerciseRaw(requestParameters: CreateDoneExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DoneExercisesDto>>>;

    /**
     * Create done exercises
     */
    createDoneExercise(createDoneExerciseCommand?: CreateDoneExerciseCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DoneExercisesDto>>;

    /**
     * 
     * @summary Delete done exercises
     * @param {string} doneExerciseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoneExerciseApiInterface
     */
    deleteDoneExerciseRaw(requestParameters: DeleteDoneExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DoneExercisesDto>>;

    /**
     * Delete done exercises
     */
    deleteDoneExercise(doneExerciseId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DoneExercisesDto>;

    /**
     * 
     * @summary Gets all done exercises
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoneExerciseApiInterface
     */
    getAllDoneExerciseRaw(requestParameters: GetAllDoneExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DoneExercisesDto>>>;

    /**
     * Gets all done exercises
     */
    getAllDoneExercise(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DoneExercisesDto>>;

    /**
     * 
     * @summary Update done exercises
     * @param {string} identifier 
     * @param {UpdateDoneExerciseCommand} [updateDoneExerciseCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DoneExerciseApiInterface
     */
    updateDoneExerciseRaw(requestParameters: UpdateDoneExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DoneExercisesDto>>;

    /**
     * Update done exercises
     */
    updateDoneExercise(identifier: string, updateDoneExerciseCommand?: UpdateDoneExerciseCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DoneExercisesDto>;

}

/**
 * 
 */
export class DoneExerciseApi extends runtime.BaseAPI implements DoneExerciseApiInterface {

    /**
     * Create done exercises
     */
    async createDoneExerciseRaw(requestParameters: CreateDoneExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DoneExercisesDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/done-exercises`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDoneExerciseCommandToJSON(requestParameters.createDoneExerciseCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DoneExercisesDtoFromJSON));
    }

    /**
     * Create done exercises
     */
    async createDoneExercise(createDoneExerciseCommand?: CreateDoneExerciseCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DoneExercisesDto>> {
        const response = await this.createDoneExerciseRaw({ createDoneExerciseCommand: createDoneExerciseCommand }, initOverrides);
        return await response.value();
    }

    /**
     * Delete done exercises
     */
    async deleteDoneExerciseRaw(requestParameters: DeleteDoneExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DoneExercisesDto>> {
        if (requestParameters.doneExerciseId === null || requestParameters.doneExerciseId === undefined) {
            throw new runtime.RequiredError('doneExerciseId','Required parameter requestParameters.doneExerciseId was null or undefined when calling deleteDoneExercise.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/done-exercises/{doneExerciseId}`.replace(`{${"doneExerciseId"}}`, encodeURIComponent(String(requestParameters.doneExerciseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoneExercisesDtoFromJSON(jsonValue));
    }

    /**
     * Delete done exercises
     */
    async deleteDoneExercise(doneExerciseId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DoneExercisesDto> {
        const response = await this.deleteDoneExerciseRaw({ doneExerciseId: doneExerciseId }, initOverrides);
        return await response.value();
    }

    /**
     * Gets all done exercises
     */
    async getAllDoneExerciseRaw(requestParameters: GetAllDoneExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DoneExercisesDto>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getAllDoneExercise.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/done-exercises/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DoneExercisesDtoFromJSON));
    }

    /**
     * Gets all done exercises
     */
    async getAllDoneExercise(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DoneExercisesDto>> {
        const response = await this.getAllDoneExerciseRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Update done exercises
     */
    async updateDoneExerciseRaw(requestParameters: UpdateDoneExerciseRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DoneExercisesDto>> {
        if (requestParameters.identifier === null || requestParameters.identifier === undefined) {
            throw new runtime.RequiredError('identifier','Required parameter requestParameters.identifier was null or undefined when calling updateDoneExercise.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerJWT", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/v1/done-exercises/{identifier}`.replace(`{${"identifier"}}`, encodeURIComponent(String(requestParameters.identifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDoneExerciseCommandToJSON(requestParameters.updateDoneExerciseCommand),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DoneExercisesDtoFromJSON(jsonValue));
    }

    /**
     * Update done exercises
     */
    async updateDoneExercise(identifier: string, updateDoneExerciseCommand?: UpdateDoneExerciseCommand, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DoneExercisesDto> {
        const response = await this.updateDoneExerciseRaw({ identifier: identifier, updateDoneExerciseCommand: updateDoneExerciseCommand }, initOverrides);
        return await response.value();
    }

}
