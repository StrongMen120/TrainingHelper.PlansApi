/* tslint:disable */
/* eslint-disable */
/**
 * Training Plans Api - All Versions
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: all
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PlansType } from './PlansType';
import {
    PlansTypeFromJSON,
    PlansTypeFromJSONTyped,
    PlansTypeToJSON,
} from './PlansType';

/**
 * 
 * @export
 * @interface UpdatePlannedTrainingCommand
 */
export interface UpdatePlannedTrainingCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdatePlannedTrainingCommand
     */
    identifier: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlannedTrainingCommand
     */
    plansId: number;
    /**
     * 
     * @type {PlansType}
     * @memberof UpdatePlannedTrainingCommand
     */
    plansType: PlansType;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlannedTrainingCommand
     */
    dateStart: string;
    /**
     * 
     * @type {string}
     * @memberof UpdatePlannedTrainingCommand
     */
    dateEnd: string;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlannedTrainingCommand
     */
    userId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlannedTrainingCommand
     */
    trainerId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof UpdatePlannedTrainingCommand
     */
    groupId?: number | null;
}

/**
 * Check if a given object implements the UpdatePlannedTrainingCommand interface.
 */
export function instanceOfUpdatePlannedTrainingCommand(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "plansId" in value;
    isInstance = isInstance && "plansType" in value;
    isInstance = isInstance && "dateStart" in value;
    isInstance = isInstance && "dateEnd" in value;

    return isInstance;
}

export function UpdatePlannedTrainingCommandFromJSON(json: any): UpdatePlannedTrainingCommand {
    return UpdatePlannedTrainingCommandFromJSONTyped(json, false);
}

export function UpdatePlannedTrainingCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdatePlannedTrainingCommand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'identifier': json['identifier'],
        'plansId': json['plansId'],
        'plansType': PlansTypeFromJSON(json['plansType']),
        'dateStart': json['dateStart'],
        'dateEnd': json['dateEnd'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'trainerId': !exists(json, 'trainerId') ? undefined : json['trainerId'],
        'groupId': !exists(json, 'groupId') ? undefined : json['groupId'],
    };
}

export function UpdatePlannedTrainingCommandToJSON(value?: UpdatePlannedTrainingCommand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'identifier': value.identifier,
        'plansId': value.plansId,
        'plansType': PlansTypeToJSON(value.plansType),
        'dateStart': value.dateStart,
        'dateEnd': value.dateEnd,
        'userId': value.userId,
        'trainerId': value.trainerId,
        'groupId': value.groupId,
    };
}

