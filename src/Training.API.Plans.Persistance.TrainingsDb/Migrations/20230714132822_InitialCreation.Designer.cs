// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Training.API.Plans.Persistance.TrainingsDb;
using Training.API.Plans.Persistance.TrainingsDb.Entities;

#nullable disable

namespace Training.API.Plans.Persistance.TrainingsDb.Migrations
{
    [DbContext(typeof(TrainingDbContext))]
    [Migration("20230714132822_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("trainings")
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "trainings", "PlansImage", new[] { "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "push", "pull", "legs", "upper", "lower" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "trainings", "PlansType", new[] { "individual", "personal", "group" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.DoneExercisesEntity", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BrakeSeconds")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<LocalDate>("Date")
                        .HasColumnType("date");

                    b.Property<long>("ExerciseInfoId")
                        .HasColumnType("bigint");

                    b.Property<LocalDateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RPE")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("Reps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Series")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Identifier");

                    b.HasIndex("ExerciseInfoId");

                    b.ToTable("DoneExercisesEntity", "trainings");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseInfoEntity", b =>
                {
                    b.Property<long>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Identifier"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("BodyElements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<LocalDateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Identifier");

                    b.ToTable("ExerciseInfo", "trainings");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseRecordsEntity", b =>
                {
                    b.Property<long>("Identifier")
                        .HasColumnType("bigint");

                    b.Property<long>("Revision")
                        .HasColumnType("bigint");

                    b.Property<double>("AdamsResult")
                        .HasColumnType("double precision");

                    b.Property<double>("BaechleResult")
                        .HasColumnType("double precision");

                    b.Property<double>("BergerResult")
                        .HasColumnType("double precision");

                    b.Property<double>("BrownResult")
                        .HasColumnType("double precision");

                    b.Property<double>("BrzyckiResult")
                        .HasColumnType("double precision");

                    b.Property<LocalDateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<LocalDate>("Date")
                        .HasColumnType("date");

                    b.Property<double>("EpleyResult")
                        .HasColumnType("double precision");

                    b.Property<double>("LombardiResult")
                        .HasColumnType("double precision");

                    b.Property<double>("MayhewResult")
                        .HasColumnType("double precision");

                    b.Property<double>("OneRepetitionMaximum")
                        .HasColumnType("double precision");

                    b.Property<int>("Reps")
                        .HasColumnType("integer");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.Property<bool>("isAutomat")
                        .HasColumnType("boolean");

                    b.HasKey("Identifier", "Revision");

                    b.ToTable("ExerciseRecords", "trainings");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseRecordsRegistryEntity", b =>
                {
                    b.Property<long>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Identifier"));

                    b.Property<LocalDateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ExerciseId")
                        .HasColumnType("bigint");

                    b.Property<long>("LatestRevision")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Identifier");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ExerciseRecordsRegistry", "trainings");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ExerciseInfoIdentifier")
                        .HasColumnType("bigint");

                    b.Property<string>("PhotoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Identifier");

                    b.HasIndex("ExerciseInfoIdentifier");

                    b.ToTable("Files", "trainings");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.PlannedExercisesEntity", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BrakeSeconds")
                        .HasColumnType("integer");

                    b.Property<LocalDateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ExerciseInfoId")
                        .HasColumnType("bigint");

                    b.Property<LocalDateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PlansId")
                        .HasColumnType("bigint");

                    b.Property<int>("RPE")
                        .HasColumnType("integer");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<string>("Reps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Series")
                        .HasColumnType("integer");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Identifier");

                    b.HasIndex("ExerciseInfoId");

                    b.HasIndex("PlansId");

                    b.ToTable("PlannedExercisesEntity", "trainings");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.PlannedTrainingsEntity", b =>
                {
                    b.Property<Guid>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<LocalDateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<LocalDateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<LocalDateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<LocalDateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("PlansId")
                        .HasColumnType("bigint");

                    b.Property<PlansType>("PlansType")
                        .HasColumnType("trainings.\"PlansType\"");

                    b.Property<long?>("TrainerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Identifier");

                    b.HasIndex("PlansId");

                    b.ToTable("PlannedTrainingsEntity", "trainings");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.PlansEntity", b =>
                {
                    b.Property<long>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Identifier"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<LocalDateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<PlansImage>("Image")
                        .HasColumnType("trainings.\"PlansImage\"");

                    b.Property<LocalDateTime?>("ModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Identifier");

                    b.ToTable("PlansEntity", "trainings");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.DoneExercisesEntity", b =>
                {
                    b.HasOne("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseInfoEntity", "ExerciseInfo")
                        .WithMany("DoneExercises")
                        .HasForeignKey("ExerciseInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("DoneExercisesEntityIdentifier")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DoneExercisesEntityIdentifier");

                            b1.ToTable("DoneExercisesEntity", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("DoneExercisesEntityIdentifier");
                        });

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "ModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("DoneExercisesEntityIdentifier")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DoneExercisesEntityIdentifier");

                            b1.ToTable("DoneExercisesEntity", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("DoneExercisesEntityIdentifier");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ExerciseInfo");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseInfoEntity", b =>
                {
                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "CreatedBy", b1 =>
                        {
                            b1.Property<long>("ExerciseInfoEntityIdentifier")
                                .HasColumnType("bigint");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ExerciseInfoEntityIdentifier");

                            b1.ToTable("ExerciseInfo", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseInfoEntityIdentifier");
                        });

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "ModifiedBy", b1 =>
                        {
                            b1.Property<long>("ExerciseInfoEntityIdentifier")
                                .HasColumnType("bigint");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ExerciseInfoEntityIdentifier");

                            b1.ToTable("ExerciseInfo", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseInfoEntityIdentifier");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseRecordsEntity", b =>
                {
                    b.HasOne("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseRecordsRegistryEntity", "RegistryEntry")
                        .WithMany("ExerciseRecords")
                        .HasForeignKey("Identifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "CreatedBy", b1 =>
                        {
                            b1.Property<long>("ExerciseRecordsEntityIdentifier")
                                .HasColumnType("bigint");

                            b1.Property<long>("ExerciseRecordsEntityRevision")
                                .HasColumnType("bigint");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ExerciseRecordsEntityIdentifier", "ExerciseRecordsEntityRevision");

                            b1.ToTable("ExerciseRecords", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseRecordsEntityIdentifier", "ExerciseRecordsEntityRevision");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("RegistryEntry");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseRecordsRegistryEntity", b =>
                {
                    b.HasOne("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseInfoEntity", "ExerciseInfo")
                        .WithMany("CurrentRecords")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "CreatedBy", b1 =>
                        {
                            b1.Property<long>("ExerciseRecordsRegistryEntityIdentifier")
                                .HasColumnType("bigint");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ExerciseRecordsRegistryEntityIdentifier");

                            b1.ToTable("ExerciseRecordsRegistry", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("ExerciseRecordsRegistryEntityIdentifier");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ExerciseInfo");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.FileEntity", b =>
                {
                    b.HasOne("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseInfoEntity", "ExerciseInfo")
                        .WithMany("Files")
                        .HasForeignKey("ExerciseInfoIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseInfo");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.PlannedExercisesEntity", b =>
                {
                    b.HasOne("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseInfoEntity", "ExerciseInfo")
                        .WithMany("PlannedExercises")
                        .HasForeignKey("ExerciseInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Training.API.Plans.Persistance.TrainingsDb.Entities.PlansEntity", "Plans")
                        .WithMany("PlannedExercises")
                        .HasForeignKey("PlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("PlannedExercisesEntityIdentifier")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlannedExercisesEntityIdentifier");

                            b1.ToTable("PlannedExercisesEntity", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("PlannedExercisesEntityIdentifier");
                        });

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "ModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("PlannedExercisesEntityIdentifier")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlannedExercisesEntityIdentifier");

                            b1.ToTable("PlannedExercisesEntity", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("PlannedExercisesEntityIdentifier");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ExerciseInfo");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.PlannedTrainingsEntity", b =>
                {
                    b.HasOne("Training.API.Plans.Persistance.TrainingsDb.Entities.PlansEntity", "Plans")
                        .WithMany("PlannedTrainings")
                        .HasForeignKey("PlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("PlannedTrainingsEntityIdentifier")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlannedTrainingsEntityIdentifier");

                            b1.ToTable("PlannedTrainingsEntity", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("PlannedTrainingsEntityIdentifier");
                        });

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "ModifiedBy", b1 =>
                        {
                            b1.Property<Guid>("PlannedTrainingsEntityIdentifier")
                                .HasColumnType("uuid");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlannedTrainingsEntityIdentifier");

                            b1.ToTable("PlannedTrainingsEntity", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("PlannedTrainingsEntityIdentifier");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ModifiedBy");

                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.PlansEntity", b =>
                {
                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "CreatedBy", b1 =>
                        {
                            b1.Property<long>("PlansEntityIdentifier")
                                .HasColumnType("bigint");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlansEntityIdentifier");

                            b1.ToTable("PlansEntity", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("PlansEntityIdentifier");
                        });

                    b.OwnsOne("Training.API.Plans.Persistance.TrainingsDb.Entities.UserDetails", "ModifiedBy", b1 =>
                        {
                            b1.Property<long>("PlansEntityIdentifier")
                                .HasColumnType("bigint");

                            b1.Property<string>("FullName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PlansEntityIdentifier");

                            b1.ToTable("PlansEntity", "trainings");

                            b1.WithOwner()
                                .HasForeignKey("PlansEntityIdentifier");
                        });

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseInfoEntity", b =>
                {
                    b.Navigation("CurrentRecords");

                    b.Navigation("DoneExercises");

                    b.Navigation("Files");

                    b.Navigation("PlannedExercises");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.ExerciseRecordsRegistryEntity", b =>
                {
                    b.Navigation("ExerciseRecords");
                });

            modelBuilder.Entity("Training.API.Plans.Persistance.TrainingsDb.Entities.PlansEntity", b =>
                {
                    b.Navigation("PlannedExercises");

                    b.Navigation("PlannedTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
